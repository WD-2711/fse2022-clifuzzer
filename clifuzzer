#!/usr/bin/env python3

import sys
sys.path.append('/home/wd/Desktop/file/fse2022-clifuzzer/src')
import argparse
import utils
import os
import json
import random
from datetime import datetime
from pprint import pprint
from OptionGrammarMiner import OptionGrammarMiner
from OptionRunner import OptionRunner
from OptionFuzzer import OptionFuzzer
from utils import Coverage

# Update this to true if we wish to also store the pass list.
STORE_PASS_VALUE = False

def get_fuzz_results (outstream, myfuzzer, fuzz_count, get_coverage):
    fail_list = []
    unresolved_list = []
    exception_list = []
    pass_list = []
    # 进行 fuzz
    for i in range(fuzz_count):
        try:
            output = myfuzzer.run(fuzzit=True)
            if type(output[0].args) == list:
                args = " ".join(output[0].args)
            elif type(output[0].args) == str:
                args = output[0].args
            print("attempt ", i, args)

            if output[1] == 'FAIL':
                fail_list.append([i, args, output[0].returncode])
            elif output[1] == 'UNRESOLVED' and output[0].returncode >2 :
                unresolved_list.append([i, args, output[0].returncode])
            else:
                if STORE_PASS_VALUE :
                    pass_list.append([i, args, output[0].returncode])
        except Exception as e:
            exception_list.append("Exception occured - {}: {}, for invocation number - {} and input - {}".format(e.__class__, e, i, myfuzzer.invocation))

    if get_coverage:
        coverage = myfuzzer.get_coverage()
        if coverage == utils.Coverage():
            outstream.write("Empty coverage received.\n".encode('latin1'))
            outstream.write(str(coverage).encode('latin1'))
        else:
            outstream.write(str(coverage).encode('latin1'))
        outstream.write("\n".encode('latin1'))
    outstream.write("\nEXCEPTION REPORTS - \n".encode('latin1'))
    for exception_details in exception_list:
        outstream.write(exception_details.encode('latin1'))
        outstream.write("\n".encode('latin1'))
    outstream.write("\nCRASH RESULTS - \n".encode('latin1'))
    for fail_result in fail_list:
        outstream.write(str(fail_result).encode('latin1'))
        outstream.write("\n".encode('latin1'))
    outstream.write("\nUNRESOLVED RESULTS - \n".encode('latin1'))
    for unresolved_result in unresolved_list:
        outstream.write(str(unresolved_result).encode('latin1'))
        outstream.write("\n".encode('latin1'))
    outstream.write("\n".encode('latin1'))
    if STORE_PASS_VALUE :
        outstream.write("\nPASSING RESULTS - \n".encode('latin1'))
        for passing_result in pass_list:
            outstream.write(str(passing_result).encode('latin1'))
            outstream.write("\n".encode('latin1'))
        outstream.write("\n".encode('latin1'))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='对给定的二进制文件运行配置模糊测试')
    parser.add_argument("binary", help="要模糊测试的二进制文件路径")
    # ex_group 的 options 中只能选一个 option
    ex_group = parser.add_mutually_exclusive_group()
    ex_group.add_argument("--get-grammar", help="打印从选项中提取的语法", action="store_true")
    ex_group.add_argument("--get-options", help="打印二进制文件中可用的命令行选项列表", action="store_true")
    ex_group.add_argument("-f","--fuzz", help="fuzzer 模糊二进制文件的次数", type=int)
    ex_group.add_argument("--get-coverage", help="fuzzer 实现的覆盖率", action="store_true")
    ex_group.add_argument("--fuzz-coverage", help="运行模糊测试 fuzz-coverage 次，然后报告提取的覆盖率。 相当于先运行 -f fuzz-coverage 然后运行 --get-coverage", type=int)
    ex_group.add_argument("--get-manual-coverage", help="提取二进制文件的手动测试覆盖率", action="store_true")

    parser.add_argument("-o", help="将输出转储到文件， 默认为 name.out")
    parser.add_argument("-g", "--gram-file", help="语法文件")
    parser.add_argument("--log-pass", help="使用选项的 log", action="store_true")
    parser.add_argument("--invalid-options", help="将无效选项插入到语法中", action="store_true")
    parser.add_argument("--invalid-values", help="在语法中，对某些选项插入无效值", action="store_true")
    parser.add_argument("--seed", help="随机种子")
    args = parser.parse_args()

    gram_file = None
    test_bin = args.binary

    if args.seed:
        random.seed(args.seed)
    else:
        # utils.RANDOM_SEED = 20001
        random.seed(utils.RANDOM_SEED)

    # 创建输出文件
    if (args.o):
        outputfilename = args.o
    else:
        outputfilename = "outputdir/" + os.path.basename(test_bin) + ".out"
    fout = open(outputfilename, 'wb', buffering=0)

    print("Test binary: {}!".format(test_bin))
    print("Writing to:", outputfilename)

    if (args.log_pass):
        STORE_PASS_VALUE = True

    if (args.gram_file):
        print("Reading grammar from:", args.gram_file)
        gram_file = args.gram_file

    # 将读取的 options 写入到 outputfilename 中
    if (args.get_options):
        # 从要 fuzz 的文件中提取 options（命令行参数）
        opt_list = utils.get_options(test_bin, args.invalid_options)
        fout.write(utils.Option_tuple_description.encode('latin1'))
        fout.write("\n".encode('latin1'))
        for opt in opt_list:
            fout.write(str(opt).encode('latin1'))
            fout.write('\n'.encode('latin1'))

    # 获得要 fuzz 文件的语法
    elif (args.get_grammar):
        miner = OptionGrammarMiner(test_bin, log=False)
        mined_grammar = miner.mine_ebnf_grammar(args.invalid_options, args.invalid_values)
        fout.write(json.dumps(mined_grammar, indent=4).encode('latin1'))

    # 是否进行 fuzz
    elif (args.fuzz):
        if gram_file:
            myrunner = OptionRunner(test_bin, gram_file)
        else:
            myrunner = OptionRunner(test_bin)
        myfuzzer = OptionFuzzer(myrunner, invalid_options=args.invalid_options, invalid_values=args.invalid_values, max_nonterminals=5)
        print("Fuzzing {} {} times now starting at {}!".format(test_bin, args.fuzz, datetime.now()))
        fout.write("Fuzzing {} {} times now starting at {}!\n".format(test_bin, args.fuzz, datetime.now()).encode('latin1'))
        get_fuzz_results(fout, myfuzzer, args.fuzz, False)
        fout.write("\nFinished fuzzing {} {} times  at {}!".format(test_bin,
        args.fuzz, datetime.now()).encode('latin1'))
        print("Finished fuzzing {} {} times at {}!".format(test_bin, args.fuzz, datetime.now()))

    elif (args.get_coverage):
        myrunner = OptionRunner(test_bin)
        myfuzzer = OptionFuzzer(myrunner, invalid_options=args.invalid_options, invalid_values=args.invalid_values, max_nonterminals=5)
        coverage = myfuzzer.get_coverage()
        if coverage == Coverage():
            fout.write("Empty coverage received.".encode("latin1"))
            fout.write(str(coverage).encode("latin1"))
            fout.write('\n'.encode('latin1'))
        else:
            fout.write(str(coverage).encode("latin1"))
            fout.write('\n'.encode('latin1'))

    elif (args.get_manual_coverage):
        myrunner = OptionRunner(test_bin)
        myfuzzer = OptionFuzzer(myrunner, invalid_options=args.invalid_options,
                                invalid_values=args.invalid_values, max_nonterminals=5)
        fout.write(str(myfuzzer.manual_test_coverage).encode("latin1"))

    elif (args.fuzz_coverage):
        if gram_file:
            myrunner = OptionRunner(test_bin, gram_file)
        else:
            myrunner = OptionRunner(test_bin)
        myfuzzer = OptionFuzzer(myrunner, invalid_options=args.invalid_options, invalid_values=args.invalid_values, max_nonterminals=5)
        print("Fuzzing {} {} times now starting at {}!".format(test_bin, args.fuzz, datetime.now()))
        fout.write("Fuzzing {} {} times now starting at {}!\n".format(test_bin, args.fuzz, datetime.now()).encode('latin1'))
        get_fuzz_results(fout, myfuzzer, args.fuzz_coverage, True)
        fout.write("\nFinished fuzzing {} {} times  at {}!".format(test_bin, args.fuzz, datetime.now()).encode('latin1'))
        print("Finished fuzzing {} {} times at {}!".format(test_bin, args.fuzz, datetime.now()))
    print("Writing done!")
    fout.close()
